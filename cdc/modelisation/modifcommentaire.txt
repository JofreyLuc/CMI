@startuml
title Modifier un commentaire 

skinparam sequence {
	ArrowColor #046380
	ActorBorderColor #046380
	LifeLineBorderColor blue
	LifeLineBackgroundColor #A9DCDF
	
	GroupBorderColor #80064B
	ActorBackgroundColor #01B0F0
	ActorFontColor #046380
	ActorFontSize 17
	ActorFontName Aapex
}

actor User
activate User
activate vueLivre
hide footbox

User -> vueLivre : clique sur modifier
vueLivre -> vueLivre : afficherEditionCommentaire()
note right : Fonction JS faisant apparaître une\nzone d'édition de commentaire
User -> vueLivre : remplit formulaire

vueLivre -> script.js : onclick()
activate script.js
script.js -> Slim : POST('../commentaireController@setCommentaire', IDcommentaire, note, texte)
activate Slim
note right : Slim fait le lien entre vue et contrôleur
deactivate script.js
Slim -> commentaireController : setCommentaire(IDcommentaire, note, text)
deactivate Slim
activate commentaireController
commentaireController ->commentaireController : vérification du commentaire
note right : Le contrôleur vérifie que le commentaire remplit \nles conditions nécéssaires pour être posté
commentaireController -> Eloquent : $eval = Evaluation::find(IDcommentaire)->trouverCommentaire
note left : find effectue une requête select \n on stock l'évaluation dans $eval \n (find est une fonction de l'ORM eloquent)
activate Eloquent
deactivate Eloquent
commentaireController -> commentaireController : modification de $eval
commentaireController -> Eloquent : $eval->save()
activate Eloquent
deactivate Eloquent
note left : save equivaut à une requête update , \n elle est propre à l'ORM eloquent

commentaireController -> Slim : setData($eval)
activate Slim

Slim -> vueLivre : render('vueLivre')
deactivate Slim
note right : Le controlleur demande à l'application d'afficher la zone de commentaire modifiée


create Notification 
commentaireController -> Notification: $notif = new Notification(id,type,contenu)
commentaireController -> Eloquent : $notif->save()
deactivate commentaireController
activate Eloquent
deactivate Eloquent
note left : Création et sauvegarde d'une notification
destroy Notification

legend center
Frameworks utilisés : slim (développement), cordova (portabilité mobile)


User : l'utilisateur (physique) de l'application
VueLivre : page php sur laquelle se trouve les informtions relativse au livre, l'utilisateur choisit ici de l'ajouter à sa bibliothèque
CommentaireController : Un contrôleur php permettant de crééer / modifier un commentaire.
Slim : composantes du framework, utilisées pour simplifier les appels aux fonctions des contrôleurs depuis les vues
script.js : Fichier JS permettant d'exécuter les requêtes AJAX et les appels aux contrôleurs
Eloquent : ORM utilisé pour faire le lien entre la BDD et les classes du modèle, afin de simplifier les requêtes sur la BDD
Notification : Une notification est une entité créée à différents moments lors de la navigation sur le site, elle est stockée dans la liste des notification de l'utilisateur
end legend
@enduml
